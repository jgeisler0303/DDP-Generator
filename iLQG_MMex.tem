#include "mex.h"
#ifndef  HAVE_OCTAVE
#include "matrix.h"
#endif

#include <math.h>

typedef struct paramDesc {
  char *name;
  int size;
  int is_var;
} tParamDesc;

<<check_nan_inf_mode: false;>>
int n_params= <<gentran(eval(length(params)))$>>;

<<
block([i], for i:1 thru length(params) do gentran(literal("tParamDesc p_name", eval(i), "= {\"", eval(params[i][1]), "\", ", eval(if params[i][2]='k then -1 else params[i][2]), ", 0}\; // -> ", eval(if params[i][2]=1 then do_replacements(params[i][1]) else do_replacements(arraymake(params[i][1], [0]))),cr)))$
>>
int n_vars= 0;

tParamDesc *paramdesc[]= {<<block([i], for i:1 thru length(params) do (gentran(literal(&, "p_name", eval(i))), if i#length(params) then gentran(literal(", "))))$>>};

typedef struct {
<<block([a], for a in aux_def do gentran(literal("    double ", eval(a[1]), "\;", cr)))>>
    
<<block([a], for a in aux_deriv do gentran(literal("    double ", eval(a[1]), "\;", cr)))>>
} aux_t;


void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[]) {
    int mode, i, k, m, n, dims[3], si, m_, n_;
    const mxArray *mxParam;
    const mxArray *mxParams;
    double t0, *L, *L1, *L2, N, *fx, *fxx, *fu, *fuu, *fxu, limit;
    double *x;
    double *u;
    double **p;
    aux_t aux_, *aux= &aux_;
    
    if(nrhs!=6) { mexErrMsgTxt("wrong number of arguments (6 expected)"); return; }
    if(nlhs!=1) { mexErrMsgTxt("wrong number of return values (1 expected)"); return; }
    if(mxGetNumberOfElements(prhs[0])!=<<gentran(eval(nx))>>) { mexErrMsgTxt("wrong number of elements in x (<<gentran(eval(nx))>> expected)"); return; }
    if(mxGetNumberOfElements(prhs[1])!=<<gentran(eval(nu))>>) { mexErrMsgTxt("wrong number of elements in u (<<gentran(eval(nu))>> expected)"); return; }
    if(mxGetNumberOfElements(prhs[2])!=1) { mexErrMsgTxt("wrong number of elements in params (1 expected)"); return; }
    if(mxGetNumberOfElements(prhs[3])!=1) { mexErrMsgTxt("wrong number of elements in mode (1 expected)"); return; }
    if(mxGetNumberOfElements(prhs[4])!=1) { mexErrMsgTxt("wrong number of elements in k (1 expected)"); return; }
    if(mxGetNumberOfElements(prhs[5])!=1) { mexErrMsgTxt("wrong number of elements in n_hor (1 expected)"); return; }
    
    mode= (int)mxGetScalar(prhs[3]);
    k= (int)mxGetScalar(prhs[4])-1;
    N= mxGetScalar(prhs[5]);
    x= mxGetPr(prhs[0]);
    u= mxGetPr(prhs[1]);
    
    mxParams= prhs[2];
    if(!mxIsStruct(mxParams)) {
        mexErrMsgIdAndTxt("MATLAB:dimagree", "Input 3 must be a struct.\n");
    }
    
    p= mxMalloc(n_params*sizeof(double *));
    for(i=0; i<n_params; i++) {
        si= (paramdesc[i]->size==-1)? N+1: paramdesc[i]->size;
        if((mxParam= mxGetField(mxParams, 0, paramdesc[i]->name))==NULL) {
            free(p);
            mexErrMsgIdAndTxt("MATLAB:dimagree", "Parameter name '%s' is not member of parameters struct.\n", paramdesc[i]->name);
        }
        m_= mxGetM(mxParam);
        n_= mxGetN(mxParam);
        if(mxIsSparse(mxParam) || !mxIsDouble(mxParam) || (m_!=1 && n_!=1) || (m_*n_!=si)) {
            mxFree(p);
            mexErrMsgIdAndTxt("MATLAB:dimagree", "Parameter name '%s' must be a vector length %d.\n", paramdesc[i]->name, si);
        }
        p[i]= mxGetPr(mxParam);
    }
    
    
<<print_aux();>>
<<print_deriv();>>
    
    switch(mode) {
        // f
        case 0:
            plhs[0]= mxCreateDoubleMatrix(<<gentran(eval(nx))>>, 1, mxREAL);
<<block([i], for i:1 thru nx do do_assign(mxGetPr\(plhs\[0\]\)[i-1], f[x[i]], 4))>>
            break;
            
        // L
        case 1:
<<do_assign(t0, L, 4)>>
            
            if(mxIsNaN(t0)) t0= mxGetInf();
            plhs[0]= mxCreateDoubleMatrix(1, 1, mxREAL);
            (*mxGetPr(plhs[0]))= t0;
            break;
            
        // F
        case 2:
<<do_assign(t0, F, 4)>>
            
            if(mxIsNaN(t0)) t0= mxGetInf();
            plhs[0]= mxCreateDoubleMatrix(1, 1, mxREAL);
            (*mxGetPr(plhs[0]))= t0;
            break;
            
        // Fx
        case 3:
            plhs[0]= mxCreateDoubleMatrix(1, <<gentran(eval(nx))>>, mxREAL);
            L1= mxGetPr(plhs[0]);
            
<<print_grad('L1, Fx);>>
            break;
            
        // Fxx
        case 4:
            plhs[0]= mxCreateDoubleMatrix(<<gentran(eval(nx))>>, <<gentran(eval(nx))>>, mxREAL);
            L2= mxGetPr(plhs[0]);
            
<<print_hess('L2, Fxx);>>
            break;
            
        // Lx
        case 5:
            plhs[0]= mxCreateDoubleMatrix(1, <<gentran(eval(nx))>>, mxREAL);
            L1= mxGetPr(plhs[0]);
            
<<print_grad('L1, Lx);>>
            break;
            
        // Lu
        case 6:
            plhs[0]= mxCreateDoubleMatrix(1, <<gentran(eval(nu))>>, mxREAL);
            L1= mxGetPr(plhs[0]);
            
<<print_grad('L1, Lu);>>
            break;
            
        // Lxx
        case 7:
            plhs[0]= mxCreateDoubleMatrix(<<gentran(eval(nx))>>, <<gentran(eval(nx))>>, mxREAL);
            L2= mxGetPr(plhs[0]);
            
<<print_hess('L2, Lxx);>>
            break;
            
        // Luu
        case 8:
            plhs[0]= mxCreateDoubleMatrix(<<gentran(eval(nu))>>, <<gentran(eval(nu))>>, mxREAL);
            L2= mxGetPr(plhs[0]);
            
<<print_hess('L2, Luu);>>
            break;
            
        // Lxu
        case 9:
            plhs[0]= mxCreateDoubleMatrix(<<gentran(eval(nx))>>, <<gentran(eval(nu))>>, mxREAL);
            L2= mxGetPr(plhs[0]);
            
<<print_hess('L2, Lxu);>>
            break;
            
        // fx
        case 10:
            plhs[0]= mxCreateDoubleMatrix(<<gentran(eval(nx))>>, <<gentran(eval(nx))>>, mxREAL);
            fx= mxGetPr(plhs[0]);
            
<<print_jaco('fx, fx);>>
            break;
            
        // fu
        case 11:
            plhs[0]= mxCreateDoubleMatrix(<<gentran(eval(nx))>>, <<gentran(eval(nu))>>, mxREAL);
            fu= mxGetPr(plhs[0]);
            
<<print_jaco('fu, fu);>>
            break;
            
        // fxx
        case 12:
            dims[0]= <<gentran(eval(nx))>>;
            dims[1]= <<gentran(eval(nx))>>;
            dims[2]= <<gentran(eval(nx))>>;
            plhs[0]= mxCreateNumericArray(3, dims,  mxDOUBLE_CLASS, mxREAL);
            fxx= mxGetPr(plhs[0]);
            
<<print_jaco2('fxx, fxx);>>
            break;
            
        // fuu
        case 13:
            dims[0]= <<gentran(eval(nu))>>;
            dims[1]= <<gentran(eval(nu))>>;
            dims[2]= <<gentran(eval(nx))>>;
            plhs[0]= mxCreateNumericArray(3, dims,  mxDOUBLE_CLASS, mxREAL);
            fuu= mxGetPr(plhs[0]);
            
<<print_jaco2('fuu, fuu);>>
            break;
            
        // fxu
        case 14:
            dims[0]= <<gentran(eval(nx))>>;
            dims[1]= <<gentran(eval(nu))>>;
            dims[2]= <<gentran(eval(nx))>>;
            plhs[0]= mxCreateNumericArray(3, dims,  mxDOUBLE_CLASS, mxREAL);
            fxu= mxGetPr(plhs[0]);
            
<<print_jaco2('fxu, fxu);>>
            break;
            
        // y
        case 15:
            plhs[0]= mxCreateDoubleMatrix(0, 1, mxREAL);
            break;
            
        case 16:
            plhs[0]= mxCreateDoubleMatrix(<<gentran(eval(nu))>>, 1, mxREAL);
            
            for(i= 0; i < <<gentran(eval(nu))>>; i++)
                mxGetPr(plhs[0])[i]= u[i];
            
            u= mxGetPr(plhs[0]);
            
<<block([i], for i in flatten(rest(arrayinfo(h), 2)) do do_clamp(i))>>
            break;
    }
    
    mxFree(p);
}
