<<gentran(literal("\/\* File generated form template iLQG_bp.tem on ", eval(timedate()), ". Do not edit! \*\/", cr, cr))>>

const int sizeofQxx= <<gentran(eval((nx*(nx+1))/2))$>>;
const int sizeofQuu= <<gentran(eval((nu*(nu+1))/2))$>>;
const int sizeofQxu= <<gentran(eval(nx*nu))$>>;
<<tri_matrix_mode: true;>>

static int bp_derivsF(back_pass_t *derivs, aux_t *aux, const double *x, const double *u, double **p, int k) {
// derivatives of f
<<print_jaco('derivs\-\>fx, fx, false);>>

<<print_jaco('derivs\-\>fu, fu, false);>>

<<if not(all_zero(fxx)) then print_jaco2('derivs\-\>fxx, fxx, false);>>

<<if not(all_zero(fuu)) then print_jaco2('derivs\-\>fuu, fuu, false);>>

<<if not(all_zero(fxu)) then print_jaco2('derivs\-\>fxu, fxu, false);>>

// derivatives of F
<<print_grad('derivs\-\>Vx, Fx);>>

<<print_hess('derivs\-\>Vxx, Fxx);>>
    return 1;
}

static int bp_derivsL(back_pass_t *derivs, aux_t *aux, const double *x, const double *u, double **p, int k) {
// derivatives of f
<<print_jaco('derivs\-\>fx, fx, true);>>

<<print_jaco('derivs\-\>fu, fu, true);>>

<<if not(all_zero(fxx)) then print_jaco2('derivs\-\>fxx, fxx, true);>>

<<if not(all_zero(fuu)) then print_jaco2('derivs\-\>fuu, fuu, true);>>

<<if not(all_zero(fxu)) then print_jaco2('derivs\-\>fxu, fxu, true);>>

// derivatives of L
<<print_grad('derivs\-\>Qx, Lx);>>

<<print_hess('derivs\-\>Qxx, Lxx);>>

<<print_grad('derivs\-\>Qu, Lu);>>

<<print_hess('derivs\-\>Quu, Luu);>>

<<print_hess('derivs\-\>Qxu, Lxu);>>

    return 1;
}

static int calcStaticDeriv(aux_t *aux, double *p[]) {
<<print_deriv(false);>>
    return 1;
}

static int calcVariableDeriv(double x[], double u[], int k, aux_t *aux, double *p[]) {
<<print_deriv(true);>>
    return 1;
}