<<gentran(literal("\/\* File generated form template iLQG_problem.tem on ", eval(timedate()), ". Do not edit! \*\/", cr, cr))>>
#ifndef ILQG_PROBLEM_H
#define ILQG_PROBLEM_H

#include <math.h>
#include "mex.h"
#ifndef  HAVE_OCTAVE
#include "matrix.h"
#endif

#define isNANorINF(v) (mxIsNaN(v) || mxIsInf(v))
#define INF mxGetInf()
// #define isNANorINF(v) (isnan(v) || !finite(v))
// #define INF HUGE_VAL

#define N_X <<gentran(eval(nx))$>> 
#define N_U <<gentran(eval(nu))$>> 

#define sizeofQxx <<gentran(eval((nx*(nx+1))/2))$>> 
#define sizeofQuu <<gentran(eval((nu*(nu+1))/2))$>> 
#define sizeofQxu <<gentran(eval(nx*nu))$>> 

typedef struct {
    double x[N_X];
    double u[N_U];
    double lower[N_U];
    double upper[N_U];
    double lower_sign[N_U];
    double upper_sign[N_U];
    double lower_hx[N_X*N_U];
    double upper_hx[N_X*N_U];
    
    double l[N_U];
    double L[N_U*N_X]; 
    double c;
    double cx[N_X];
    double cxx[sizeofQxx];
    double cu[N_U];
    double cuu[sizeofQuu];
    double cxu[sizeofQxu];
    double fx[N_X*N_X];
    double fu[N_X*N_U];
#if FULL_DDP
    double fxx[N_X*sizeofQxx];
    double fuu[N_X*sizeofQuu];
    double fxu[N_X*sizeofQxu];
#endif
<<block([a], for a in aux_def do if get(a[1], used_by_running) then gentran(literal("    double ", eval(a[1]), "\;", cr)))>>

<<block([a], for a in aux_deriv do if get(a[1], used_by_running) then gentran(literal("    double ", eval(a[1]), "\;", cr)))>>
} trajEl_t;

typedef struct {
    double x[N_X];

    double c;
    double cx[N_X];
    double cxx[sizeofQxx];

<<block([a], for a in aux_def do if get(a[1], used_by_final) then gentran(literal("    double ", eval(a[1]), "\;", cr)))>>

<<block([a], for a in aux_deriv do if get(a[1], used_by_final) then gentran(literal("    double ", eval(a[1]), "\;", cr)))>>
} trajFin_t;

typedef struct {
    trajEl_t* t;
    trajFin_t f;
} traj_t;

typedef struct {
<<if n_hle#0 then gentran(literal("    double mu_le[", eval(n_hle), "]\;", cr))>>
<<if n_hle#0 then gentran(literal("    double last_hle[", eval(n_hle), "]\;", cr))>>

<<if n_hli#0 then gentran(literal("    double mu_li[", eval(n_hli), "]\;", cr))>>
<<if n_hli#0 then gentran(literal("    double last_hli[", eval(n_hli), "]\;", cr))>>
} multipliersEl_t;

typedef struct {
<<if n_hfe#0 then gentran(literal("    double mu_fe[", eval(n_hfe), "]\;", cr))>>
<<if n_hfe#0 then gentran(literal("    double last_hfe[", eval(n_hfe), "]\;", cr))>>

<<if n_hfi#0 then gentran(literal("    double mu_fi[", eval(n_hfi), "]\;", cr))>>
<<if n_hfi#0 then gentran(literal("    double last_hfi[", eval(n_hfi), "]\;", cr))>>
} multipliersFin_t;

typedef struct {
    multipliersEl_t* t;
    multipliersFin_t f;
} multipliers_t;

#endif // ILQG_PROBLEM_H
