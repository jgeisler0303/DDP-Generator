<<gentran(literal("\/\* File generated form template iLQG_func.tem on ", eval(timedate()), ". Do not edit! \*\/", cr, cr))>>
#include "iLQG.h"
#include "matMult.h"

#define mcond(cond, a, dummy, b) (cond)? a: b

<<tri_matrix_mode: true;>>

int n_params= <<gentran(eval(length(params)))$>>;
    
<<
block([i], for i:1 thru length(params) do gentran(literal("tParamDesc p_name", eval(i), "= {\"", eval(params[i][1]), "\", ", eval(if params[i][2]='k then -1 else params[i][2]), ", 0}\; // -> ", eval(if params[i][2]=1 then do_replacements(params[i][1]) else do_replacements(arraymake(params[i][1], [0]))),cr)))$
>>
int n_vars= 0;
    
tParamDesc *paramdesc[]= {<<block([i], for i:1 thru length(params) do (gentran(literal(&, "p_name", eval(i))), if i#length(params) then gentran(literal(", "))))$>>};

<<for a_work in aux_def do gentran(literal("#define ", eval(concat(aux_prefix, a_work[1])), " t->", eval(a_work[1]), cr))$>>

<<for a_work in aux_deriv do gentran(literal("#define ", eval(concat(daux_prefix, a_work[1])), " t->", eval(a_work[1]), cr))$>>

<<block([i], for i: 1 thru n_hfe do gentran(literal("#define mu_fe_", eval(i), " m->mu_fe[", eval(i-1), "]", cr)))$>>

<<block([i], for i: 1 thru n_hfi do gentran(literal("#define mu_fi_", eval(i), " m->mu_fi[", eval(i-1), "]", cr)))$>>

<<block([i], for i: 1 thru n_hle do gentran(literal("#define mu_le_", eval(i), " m->mu_le[", eval(i-1), "]", cr)))$>>

<<block([i], for i: 1 thru n_hli do gentran(literal("#define mu_li_", eval(i), " m->mu_li[", eval(i-1), "]", cr)))$>>

static int calcXVariableAux(trajEl_t *t, multipliersEl_t *m, int k, tOptSet *o);
static int calcXUVariableAux(trajEl_t *t, multipliersEl_t *m, int k, tOptSet *o);
static int calcFVariableAux(trajFin_t *t, multipliersFin_t *m, tOptSet *o);
static int calcLAuxDeriv(trajEl_t *t, multipliersEl_t *m, int k, tOptSet *o);
static int calcFAuxDeriv(trajFin_t *t, multipliersFin_t *m, tOptSet *o);
static int bp_derivsL(trajEl_t *t, int k, double **p);
static int bp_derivsF(trajFin_t *t, int k, double **p);

static int ddpL(trajEl_t *t, int k, tOptSet *o) {
    const double *x= t->x;
    const double *u= t->u;
    double **p= o->p;
    
<<do_assign('t\-\>c, L, 4, 0)>>
    
    return 1;
}

static int ddpF(trajFin_t *t, tOptSet *o) {
    const double *x= t->x;
    const int k= o->n_hor;
    double **p= o->p;
    
<<do_assign('t\-\>c, F, 4, 0)>>
    
    return 1;
}

static int ddpf(double x_next[], trajEl_t *t, int k, double **p, int N) {
    const double *x= t->x;
    const double *u= t->u;
    
<<block([i], for i:1 thru nx do do_assign(x_next[i-1], f[x[i]], 4, 0))>>
    return 1;
}

void clampU(double *u, trajEl_t *t, int k, double **p, int N) {
    double limit;
    const double *x= t->x;

<<block([i], for i: 1 thru nh do do_clamp(i))>>
}

static void limitsU(trajEl_t *t, int k, double **p, int N) {
    int i, j;
    int lower_idx[N_U], upper_idx[N_U], *idx_;
    double limit;
    const double *x= t->x;
    double *hx_, *h_sign;

    for(i= 0; i<N_U; i++) {
        lower_idx[i]= -1;
        upper_idx[i]= -1;
        t->lower[i]= -INF;
        t->upper[i]= INF;
    }        
    
<<block([i], for i: 1 thru nh do do_limits('t\-\>, i))>>

    for(i= 0; i<N_U; i++) {
        t->lower[i]-= t->u[i];
        t->upper[i]-= t->u[i]; 
    }

    for(j= 0; j<2; j++) {
        if(j==0) {
            idx_= lower_idx;
            hx_= t->lower_hx;
            h_sign= t->lower_sign;
        } else {
            idx_= upper_idx;
            hx_= t->upper_hx;
            h_sign= t->upper_sign;
        }
        for(i= 0; i<N_U; i++, hx_+= N_X, h_sign++) {
            switch(idx_[i]) {
                case -1:
                    h_sign[0]= 0.0;
                    break;
<<block([i], for i: 1 thru nh do (
  gentran(literal("                case ", eval(i-1), "\:", cr)),
  do_hx('hx_, 'h_sign, i, 4*5),
  gentran(literal("                    break\;", cr))
))>>
            }
        }
    }
}

int forward_pass(traj_t *c, tOptSet *o, double alpha, double *csum, int cost_only) {
    int i, k, j;
    double dx;
    double *x0= o->x0;
    int N= o->n_hor;
    double **params= o->p;
    
    trajEl_t *t= o->nominal->t;
    trajFin_t *f= &o->nominal->f;
    trajEl_t *ct= c->t;
    trajFin_t *cf= &c->f;
    
    multipliersEl_t *m= o->multipliers.t;
    multipliersFin_t *mf= &o->multipliers.f;
    
    double *x_next;
    
    csum[0]= 0.0;

    if(!cost_only)
        for(i= 0; i<N_X; i++) ct->x[i]= x0[i]; // ic

    for(k= 0; k<N; k++, t++, ct++, m++) {
        if(!cost_only) {
            if(alpha) {
                for(j= 0; j<N_U; j++)
                    ct->u[j]= t->u[j] + t->l[j]*alpha;
                for(i= 0; i<N_X; i++) {
                    dx= ct->x[i] - t->x[i];
                    
                    for(j= 0; j<N_U; j++) {
                        ct->u[j]+= t->L[MAT_IDX(j, i, N_U)]*dx;
                    }
                }
            } else {
                for(j= 0; j<N_U; j++)
                    ct->u[j]= t->u[j];
            }
        }        
        if(!calcXVariableAux(ct, m, k, o)) return 0;
        
        if(!cost_only)
            clampU(ct->u, ct, k, params, N);
        if(!calcXUVariableAux(ct, m, k, o)) return 0;
        
        if(!cost_only) {
            if(k>=N-1)
                x_next= cf->x;
            else
                x_next= (ct+1)->x;
                
            if(!ddpf(x_next, ct, k, params, N)) return 0;
        }
        
        if(!ddpL(ct, k, o)) return 0;
        csum[0]+= ct->c;        
    }
    
    if(!calcFVariableAux(cf, mf, o)) return 0;
        
    if(!ddpF(cf, o))  return 0;
    csum[0]+= cf->c;
        
    return 1;
}

#if FULL_DDP
int calc_deriv(double *cx, double *cu, double *cxx, double *cuu, double *cxu, double *fx, double *fu, double *fxx, double *fuu, double *fxu, *(int)(double*, double*, void *, void *, double*, int, tOptSet*) func, void *t, void *m, int k, tOptSet *o, int N, double* f_nom, double Jnom);
#else
int calc_deriv(double *cx, double *cu, double *cxx, double *cuu, double *cxu, double *fx, double *fu, *(int)(double*, double*, void *, void *, double*, int, tOptSet*) func, void *t, void *m, int k, tOptSet *o, int N, double* f_nom, double Jnom);
#endif

int fJfuncL(double* f, double* J, void *t, void *m, double* xu, int k, tOptSet *o);
int fJfuncF(double* f, double* J, void *t, void *m, double* xu, int k, tOptSet *o);

int calc_derivs(tOptSet *o) {
    int k, i_;
    int N= o->n_hor;
    double *fnom;

    trajEl_t *t= o->nominal->t + N -1;
    trajFin_t *f= &o->nominal->f;
    
    multipliersEl_t *m= o->multipliers.t + N - 1;
    multipliersFin_t *mf= &o->multipliers.f;

    
#if FULL_DDP
    if(!calc_deriv(f->cx, f->cu, f->cxx, f->cuu, f->cxu, NULL, NULL, NULL, NULL, NULL, &fJfuncF, f, mf, N, o, N, NULL, f->c)) return 0;
#else
    if(!calc_deriv(f->cx, f->cu, f->cxx, f->cuu, f->cxu, NULL, NULL, &fJfuncF, f, mf, N, o, N, NULL, f->c)) return 0;
#endif
    fnom= f->x;    

#if MULTI_THREADED   
    pthread_mutex_lock(&step_mutex);
    step_calc_done= N;
    pthread_cond_signal(&next_step_condition);
    pthread_mutex_unlock(&step_mutex);
#endif

    for(k= N-1; k>=0; k--, t--, m--) {
#if FULL_DDP
        if(!calc_deriv(t->cx, t->cu, t->cxx, t->cuu, t->cxu, t->fx, t->fu, t->fxx, t->fuu, t->fxu, &fJfuncL, t, m, k, o, N, fnom, t->c)) return 0;
#else
        if(!calc_deriv(t->cx, t->cu, t->cxx, t->cuu, t->cxu, t->fx, t->fu, &fJfuncL, t, m, k, o, N, fnom, t->c)) return 0;
#endif
        
        limitsU(t, k, o->p, N);
	fnom= t->x;

#if MULTI_THREADED   
        pthread_mutex_lock(&step_mutex);
        step_calc_done= k;
        pthread_cond_signal(&next_step_condition);
        pthread_mutex_unlock(&step_mutex);
#endif
    }

    return 1;
}

// https://en.wikipedia.org/wiki/Finite_difference#Finite_difference_in_several_variables
#if FULL_DDP
int calc_deriv(double *cx, double *cu, double *cxx, double *cuu, double *cxu, double *fx, double *fu, double *fxx, double *fuu, double *fxu, *(int)(double*, double*, void *, void *, double*, int, double**) func, void *t, void *m, int k, tOptSet *o, int N, double* f_nom, double Jnom)
#else
int calc_deriv(double *cx, double *cu, double *cxx, double *cuu, double *cxu, double *fx, double *fu, double *fxu, *(int)(double*, double*, void *, void *, double*, int, double**) func, void *t, void *m, int k, tOptSet *o, int N, double* f_nom, double Jnom)
#endif
{
    double xu[N_X+N_U];
    double J_p[N_X+N_U];
    double J_m[N_X+N_U];
    double f_p[N_X*(N_X+N_U)];
    double f_m[N_X*(N_X+N_U)];
    double h[N_X+N_U];
    double xu_, xu_i, xu_j, J_pp, J_mm, f_pp[N_X], f_mm[N_X], dJ1, dJ2, *df1, *df2;
    int i, j, i_u, j_u, i_f, j_f, k_f, n, n_f;
    
    for(i= 0; i<N_X; i++) xu[i]= t->x[i];
    for(i= 0; i<N_U; i++) u[i]= t->u[i];
    
    n= (k<N)? N_X+N_U: N_X;
    
    for(i= 0, i_u= 0, i_f= 0; i<n; i++, i_f+=N_X) {
        xu_= xu[i];
        h[i]= EPS*fabs(xu_);
        if(h[i]<EPS) h[i]= EPS;
        xu[i]= xu_ + h[i];
        h[i]= xu[i] - xu_; 
        if(!func(&f_p[i_f], &J_p[i], t, m, xu, k, p)) return 0;

        xu[i]= xu_ - h[i];
        if(!func(&f_m[i_f], &J_m[i], t, m, xu, k, p)) return 0;

        xu[i]= xu_;
        
        dJ1= (J_p[i] - J_m[i]) / (2.0*h[i]);
        dJ2= (J_p[i] - 2.0*t->c + J_m[i]) / (h[i]*h[i]);
        if(i>=N_X) {
            cu[i_u]= dJ1;
            cuu[UTRI_MAT_IDX(i_u, i_u)]= dJ2;
            df1= fu + i_u*N_X;
#if FULL_DDP
            n_f= sizeofQuu;
            df2= &fuu[UTRI_MAT_IDX(i_u, i_u)];
#endif            
            i_u++;
        } else {
            cx[i]= dJ1;
            cxx[UTRI_MAT_IDX(i, i)]= dJ2;
            df1= fx + i*N_X;
#if FULL_DDP
            n_f= sizeofQuu;
            df2= &fxx[UTRI_MAT_IDX(i, i)];
#endif            
        }
        if(k<N) {
            for(j_f= 0, k_f= 0; j_f<N_X; j_f++, k_f+= n_f) {
                df1[j_f]= (f_p[i_f + j_f] - f_m[i_f + j_f]) / (2.0*h[i]);
#if FULL_DDP
                df2[k_f]= (f_p[i_f + j_f] - 2.0*(t+1)->x[j_f] + f_m[i_f + j_f]) / (h[i]*h[i]);
#endif            
            }
        }
    }
    
    for(j= 1, j_u= 0; j<n; j++) {
        for(i= 0, i_u= 0; i<j; i++) {
            xu_i= xu[i];
            xu_j= xu[j];
            xu[i]= xu_i + h[i];
            xu[j]= xu_j + h[j];
#if FULL_DDP
            if(!func(&f_pp, &J_pp, t, m, xu, k, p)) return 0;
#else
            if(!func(NULL, &J_pp, t, m, xu, k, p)) return 0;
#endif

            xu[i]= xu_i - h[i];
            xu[j]= xu_j - h[j];
#if FULL_DDP
            if(!func(&f_mm, &J_mm, t, m, xu, k, p)) return 0;
#else
            if(!func(NULL, &J_mm, t, m, xu, k, p)) return 0;
#endif
            xu[i]= xu_i;
            xu[j]= xu_j;
            
            dJ2= (J_pp - J_p[i] - J_p[j] + 2.0*t->c - J_m[i] - J_m[j] + J_mm) / (2.0*h[i]*h[j]);
            if(j>=N_X) {
                if(i>=N_X) {
                    cuu[UTRI_MAT_IDX(i_u, j_u)]= dJ2;
#if FULL_DDP
                    n_f= sizeofQuu;
                    df2= &fuu[UTRI_MAT_IDX(i_u, j_u)];
#endif    
                    i_u++;
                } else {
                    cxu[MAT_IDX(i, j_u, N_X)]= dJ2;
#if FULL_DDP
                    n_f= sizeofQxu;
                    df2= &fxu[MAT_IDX(i, j_u, N_X)];
#endif    
                }
                j_u++;
            } else {
                cxx[UTRI_MAT_IDX(i, j)]= dJ2;
#if FULL_DDP
                    n_f= sizeofQxx;
                    df2= &fxx[UTRI_MAT_IDX(i, j)];
#endif    
            }
#if FULL_DDP
            if(k<N)
	        for(j_f= 0, k_f= 0; j_f<N_X; j_f++, k_f+= n_f) {
	            df2[k_f]= (f_pp[j_f] - f_p[i*N_X + j_f] - J_p[j*N_X + j_f] + 2.0*(t+1)->x[j_f] - f_m[i*N_X + j_f] - f_m[j*N_X + j_f] + f_mm[j_f]) / (2.0*h[i]*h[j]);
	        }
#endif            
        }
    }
    
    return 1;
}

    
int fJfuncL(double* f, double* J, void *t_, void *m_, double* xu, int k, tOptSet *o);
    double *x= xu;
    double *u= xu+N_X;
    int N= o->n_hor;
    double **params= o->p;
    trajEl_t *t= (trajEl_t *)t_;
    multipliersEl_t *m= (multipliersEl_t *)m_;

    // TODO: x, u not used!!!
    if(!calcXVariableAux(t, m, k, o)) return 0;
    if(!calcXUVariableAux(t, m, k, o)) return 0;
    if(f)    
        if(!ddpf(f, t, k, params, N)) return 0;
    if(!ddpL(t, k, o)) return 0;
    J[0]= t->c;        
}

int fJfuncF(double* f, double* J, void *t_, void *m_, double* xu, int k, tOptSet *o);
    double *x= xu;
    int N= o->n_hor;
    double **params= o->p;
    trajFin_t *t= (trajFin_t*)t_;
    multipliersFin_t *m= (multipliersFin_t*)m_;

    // TODO: x not used!!!
    if(!calcFVariableAux(t, m, o)) return 0;
    if(!ddpF(t, o))  return 0;
    J[0]= t->c;
}

static int calcXVariableAux(double *x, trajEl_t *t, int k, double **p) {
<<print_aux(1);>>
    return 1;
} 

static int calcXVariableAux(trajEl_t *t, multipliersEl_t *m, int k, tOptSet *o) {
    const double *x= t->x;
    double **p= o->p;
    const double w_pen= o->w_pen_l;
    
<<print_aux(1, used_by_running);>>
    return 1;
} 

static int calcXUVariableAux(trajEl_t *t, multipliersEl_t *m, int k, tOptSet *o) {
    const double *x= t->x;
    const double *u= t->u;
    double **p= o->p;
    const double w_pen= o->w_pen_l;
    
<<print_aux(2, used_by_running);>>
    return 1;
} 

static int calcFVariableAux(trajFin_t *t, multipliersFin_t *m, tOptSet *o) {
    const double *x= t->x;
    double **p= o->p;
    const double w_pen= o->w_pen_f;
    const int k= o->n_hor;
    
<<print_aux(1, used_by_final);>>
    return 1;
} 

static int init_running(trajEl_t *t, tOptSet *o) {
    int k;
    double **p= o->p;
    
    for(k= 0; k<o->n_hor; k++, t++) {
<<print_aux(0, used_by_running);>>

<<print_deriv(0, used_by_running);>>

// derivatives of L
<<print_grad('t\-\>cx, Lx, false);>>

<<print_hess('t\-\>cxx, Lxx, false);>>

<<print_grad('t\-\>cu, Lu, false);>>

<<print_hess('t\-\>cuu, Luu, false);>>

<<print_hess('t\-\>cxu, Lxu, false);>>

// derivatives of f
<<print_jaco('t\-\>fx, fx, false);>>

<<print_jaco('t\-\>fu, fu, false);>>

#if FULL_DDP
<<if not(all_zero(fxx)) then print_jaco2('t\-\>fxx, fxx, false) else gentran(literal("    memset(t\-\>fxx, 0, sizeof(double)*N_X*sizeofQxx)\;", cr));>>

<<if not(all_zero(fuu)) then print_jaco2('t\-\>fuu, fuu, false) else gentran(literal("    memset(t\-\>fuu, 0, sizeof(double)*N_X*sizeofQuu)\;", cr));>>

<<if not(all_zero(fxu)) then print_jaco2('t\-\>fxu, fxu, false) else gentran(literal("    memset(t\-\>fxu, 0, sizeof(double)*N_X*sizeofQxu)\;", cr));>>
#endif
    }
    
    return 1;
}

static int init_final(trajFin_t *t, tOptSet *o) {
    double **p= o->p;
    const int k= o->n_hor;

<<print_aux(0, used_by_final);>>

<<print_deriv(0, used_by_final);>>

<<print_grad('t\-\>cx, Fx, false);>>

<<print_hess('t\-\>cxx, Fxx, false);>>

    return 1;
}

int init_trajectory(traj_t *t, tOptSet *o) {
    if(!init_running(t->t, o)) return 0;
    if(!init_final(&t->f, o)) return 0;
    
    return 1;
}

static int init_multipliers_running(tOptSet *o) {
    multipliersEl_t *m= o->multipliers.t;
    int k, i;

    for(k= 0; k<o->n_hor; k++, m++) {
<<if  n_hle#0 then gentran(literal("        for(i= 0\; i<", eval(n_hle), "\; i++) { m->mu_le[i]= 0.0\; m->last_hle[i]= 0.0\; }", cr))>>

<<if  n_hli#0 then gentran(literal("        for(i= 0\; i<", eval(n_hli), "\; i++) { m->mu_li[i]= 1.0\; m->last_hli[i]= 0.0\; }", cr))>>
    }
    
    return 1;
}

static int init_multipliers_final(tOptSet *o) {
    multipliersFin_t *m= &o->multipliers.f;
    int i;

<<if  n_hfe#0 then gentran(literal("    for(i= 0\; i<", eval(n_hfe), "\; i++) { m->mu_fe[i]= 0.0\; m->last_hfe[i]= 0.0\; }", cr))>>

<<if  n_hfi#0 then gentran(literal("    for(i= 0\; i<", eval(n_hfi), "\; i++) { m->mu_fi[i]= 1.0\; m->last_hfi[i]= 0.0\; }", cr))>>
    
    return 1;
}

int init_multipliers(tOptSet *o) {
    if(!init_multipliers_running(o)) return 0;
    if(!init_multipliers_final(o)) return 0;
    
    return 1;
}

int init_opt(tOptSet *o) {
    int i;
    
    for(i= 0; i<NUMBER_OF_THREADS+1; i++)
        if(!init_trajectory(&o->trajectories[i], o)) return 0;

    o->nominal= &o->trajectories[0];
    for(i= 1; i<NUMBER_OF_THREADS+1; i++)
    o->candidates[i-1]= &o->trajectories[i];
    
    if(!init_multipliers(o)) return 0;
    
    return 1;
}

static int update_multipliers_running(tOptSet *o, int init) {
    trajEl_t *t= o->nominal->t;
    multipliersEl_t *m= o->multipliers.t;
    const double *x= t->x;
    const double *u= t->u;
    const double w_pen= o->w_pen_l;
    double **p= o->p;
    int increase_pen= 0;
    int k, i;
    
    for(k= 0; k<o->n_hor; k++, m++, t++) {
<<block([i], ?ccurrind\*: 4, for i: 1 thru n_hle do (
  gentran(if fabs(eval(do_replacements(concat('hle_, i))))>o\-\>tolConstraint and o\-\>w_pen_fact1*fabs(eval(do_replacements(concat('hle_, i))))>fabs(m\-\>last_hle[eval(i-1)]) then increase_pen: 1),
  ?ccurrind\*: 4,
  gentran(lrsetq(m\-\>last_hle[i-1], do_replacements(concat('hle_, i)))),
  gentran(literal(cr))
))>>

<<block([i], ?ccurrind\*: 4, for i: 1 thru n_hli do (
  gentran(if eval(do_replacements(concat('hli_, i)))>o\-\>tolConstraint and o\-\>w_pen_fact1*eval(do_replacements(concat('hli_, i)))>m\-\>last_hli[eval(i-1)] then increase_pen: 1),
  ?ccurrind\*: 4,
  gentran(lrsetq(m\-\>last_hli[i-1], do_replacements(concat('hli_, i)))),
  gentran(literal(cr))
))>>
// TODO: maybe check test for sufficient complementarity reduction

    if(init) return 1;
<<block([i], for i: 1 thru n_hle do do_assign(concat(mu_le_, i), mu_le_next[i], 8, 0))>>

// inequality constraints according to D. Ruxton: Differential dynamic programming applied to continuous optimal control problems with state variable inequality constraints
<<block([i], for i: 1 thru n_hli do (
  gentran(literal("    if(", eval(do_replacements(concat('hli_, i))), ">=0) {", cr)),
  do_assign(concat('mu_li_, i), mu_li_A_next[i], 4*3, 0),
  gentran(literal("    } else {", cr)),
  do_assign(concat('mu_li_, i), mu_li_I_next[i], 4*3, 0),
  gentran(literal("    }", cr, cr))
))>>
    }
    
    if(!init && increase_pen)
        o->w_pen_l= min(o->w_pen_max_l, o->w_pen_l*o->w_pen_fact1);
        
    return 1;
}

static int update_multipliers_final(tOptSet *o, int init) {
    trajFin_t *t= &o->nominal->f;
    multipliersFin_t *m= &o->multipliers.f;
    const double *x= t->x;
    const double w_pen= o->w_pen_f;
    double **p= o->p;
    int increase_pen= 0;
    int k= o->n_hor;

<<block([i], ?ccurrind\*: 4, for i: 1 thru n_hfe do (
  gentran(if fabs(eval(do_replacements(concat('hfe_, i))))>o\-\>tolConstraint and o\-\>w_pen_fact1*fabs(eval(do_replacements(concat('hfe_, i))))>fabs(m\-\>last_hfe[eval(i-1)]) then increase_pen: 1),
  ?ccurrind\*: 4,
  gentran(lrsetq(m\-\>last_hfe[i-1], do_replacements(concat('hfe_, i)))),
  gentran(literal(cr))
))>>

<<block([i], ?ccurrind\*: 4, for i: 1 thru n_hfi do (
  gentran(if eval(do_replacements(concat('hfi_, i)))>o\-\>tolConstraint and o\-\>w_pen_fact1*eval(do_replacements(concat('hfi_, i)))>m\-\>last_hfi[eval(i-1)] then increase_pen: 1),
  ?ccurrind\*: 4,
  gentran(lrsetq(m\-\>last_hfi[i-1], do_replacements(concat('hfi_, i)))),
  gentran(literal(cr))
))>>
// TODO: maybe check test for sufficient complementarity reduction

    if(!init && increase_pen)
        o->w_pen_f= min(o->w_pen_max_f, o->w_pen_f*o->w_pen_fact1);

    if(init) return 1;
<<block([i], for i: 1 thru n_hfe do do_assign(concat(mu_fe_, i), mu_fe_next[i], 4, 0))>>

// inequality constraints according to D. Ruxton: Differential dynamic programming applied to continuous optimal control problems with state variable inequality constraints
<<block([i], for i: 1 thru n_hfi do (
  gentran(literal("    if(", eval(do_replacements(concat('hfi_, i))), ">=0) {", cr)),
  do_assign(concat('mu_fi_, i), mu_fi_A_next[i], 4*2, 0),
  gentran(literal("    } else {", cr)),
  do_assign(concat('mu_fi_, i), mu_fi_I_next[i], 4*2, 0),
  gentran(literal("    }", cr, cr))
))>>

    return 1;
}

int update_multipliers(tOptSet *o, int init) {
    if(!update_multipliers_running(o, init)) return 0;
    if(!update_multipliers_final(o, init)) return 0;

    return 1;
}

int get_g_size() {
<<if member(g, arrays) then gentran(literal("return(", eval(length(flatten(rest(arrayinfo(g), 2)))), ")\;", cr)) else gentran(return(0))>>
}

int calcG(double g[], trajEl_t *t, int k, double **p) {
    const double *x= t->x;
    const double *u= t->u;
    
<<block([i, i_: 0], if member(g, arrays) then for i in flatten(rest(arrayinfo(g), 2)) do (do_assign('g[i_], g[i], 4, 0), i_:i_+1))>>
    return(1);
} 
