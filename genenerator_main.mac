/* load(gentran)$ */
if not(member('x, values)) then
  error("vector of states x not defined");
print("using states: ", x);
if not(listp(x)) then
  error("x must be a_work list of states");
if not(member('u, values)) then
  error("vector of inputs u not defined");
if not(listp(u)) then
  error("u must be a_work list of inputs");
print("using inputs: ", u);

if not(member('f, arrays)) then
  error("state transition function f not defined");

if not(flatten(rest(arrayinfo(f), 2))=sort(x)) then
  error("elements of f must be indexed by elements of x");
  
if not(member('F, values)) then
  error("final cost F not defined");
if listp(F) then 
  error("final cost F must not be a_work list");
  
if not(member('L, values)) then
  error("running cost L not defined");
if listp(L) then 
  error("running cost L must not be a_work list");
 
gentranlang(c)$
off('float)$
off(gentranseg)$
?ccurrind\*: 4$
?clinelen\*: 1000$
aux_prefix: aux_;
daux_prefix: daux_;

remove(all, rule);

nx:length(x);
nu:length(u);
tri_matrix_mode: false;
check_nan_inf_mode: true;

dg_time_var_symbols: append(x, u /*, [k]*/);

if member(hfe, arrays) then block([i_work],
  hfe_: map(lambda([i_work], arrayapply(hfe, [i_work])), flatten(rest(arrayinfo(hfe), 2))),
  if not(emptyp(sublist(flatten(args(jacobian(hfe_, u))), lambda([x], is(x#0))))) then 
    error("hfe must not depend on any input u"),
    
  n_hfe: length(hfe_),
  for i_work: 1 thru n_hfe do (
    concat('hfe_, i_work):: hfe_[i_work],
    concat('pfe_, i_work):: concat('mu_fe_, i_work) * concat('hfe_, i_work) + 0.5*w_pen*(concat('hfe_, i_work))^2,
    mu_fe_next[i_work]: concat('mu_fe_, i_work) + w_pen*concat('hfe_, i_work),
    F: F + concat('pfe_, i_work)
  ),
  dg_time_var_symbols: append(dg_time_var_symbols, [w_pen]),

  mu_hfe_all: makelist(concat('mu_fe_, i_work), i_work, 1, n_hfe),
  dg_time_var_symbols: append(dg_time_var_symbols, mu_hfe_all)
) else (
  n_hfe: 0,
  mu_hfe_all: []
);

if member(hfi, arrays) then block([i_work],
  hfi_: map(lambda([i_work], arrayapply(hfi, [i_work])), flatten(rest(arrayinfo(hfi), 2))),
  if not(emptyp(sublist(flatten(args(jacobian(hfi_, u))), lambda([x], is(x#0))))) then 
    error("hfi must not depend on any input u"),

  n_hfi: length(hfi_),
  for i_work: 1 thru n_hfi do (
    concat('hfi_, i_work):: hfi_[i_work],
    concat('pfi_, i_work):: 'if concat('hfi_, i_work)>=0 then concat('mu_fi_, i_work) * concat('hfi_, i_work) * (1 + w_pen*concat('hfi_, i_work)) else concat('mu_fi_, i_work) * concat('hfi_, i_work) / (1 - w_pen*concat('hfi_, i_work)), 
    mu_fi_A_next[i_work]: concat('mu_fi_, i_work) * (1 + 2*w_pen*concat('hfi_, i_work)),
    mu_fi_I_next[i_work]: concat('mu_fi_, i_work) * (1 - w_pen*concat('hfi_, i_work))^-2,
    F: F + concat('pfi_, i_work)
  ),
  dg_time_var_symbols: append(dg_time_var_symbols, [w_pen]),

  mu_hfi_all: makelist(concat('mu_fi_, i_work), i_work, 1, n_hfi),
  dg_time_var_symbols: append(dg_time_var_symbols, mu_hfi_all)
) else (
  n_hfi: 0,
  mu_hfi_all: []
);

if member(hle, arrays) then block([i_work],
  hle_: map(lambda([i_work], arrayapply(hle, [i_work])), flatten(rest(arrayinfo(hle), 2))),
  n_hle: length(hle_),
  for i_work: 1 thru n_hle do (
    concat('hle_, i_work):: hle_[i_work],
    concat('ple_, i_work):: concat('mu_le_, i_work) * concat('hle_, i_work) + 0.5*w_pen*(concat('hle_, i_work))^2,
    mu_le_next[i_work]: concat('mu_le_, i_work) + w_pen*concat('hle_, i_work),
    L: L + concat('ple_, i_work)
  ),
  dg_time_var_symbols: append(dg_time_var_symbols, [w_pen]),

  mu_hle_all: makelist(concat('mu_le_, i_work), i_work, 1, n_hle),
  dg_time_var_symbols: append(dg_time_var_symbols, mu_hle_all)
) else (
  n_hle: 0,
  mu_hle_all: []
);

if member(hli, arrays) then block([i_work],
  hli_: map(lambda([i_work], arrayapply(hli, [i_work])), flatten(rest(arrayinfo(hli), 2))),
  n_hli: length(hli_),
  for i_work: 1 thru n_hli do (
    concat('hli_, i_work):: hli_[i_work],
    concat('pli_, i_work):: 'if concat('hli_, i_work)>=0 then concat('mu_li_, i_work) * concat('hli_, i_work) * (1 + w_pen*concat('hli_, i_work)) else concat('mu_li_, i_work) * concat('hli_, i_work) / (1 - w_pen*concat('hli_, i_work)), 
    mu_li_A_next[i_work]: concat('mu_li_, i_work) * (1 + 2*w_pen*concat('hli_, i_work)),
    mu_li_I_next[i_work]: concat('mu_li_, i_work) * (1 - w_pen*concat('hli_, i_work))^-2,
    L: L + concat('pli_, i_work)
  ),
  dg_time_var_symbols: append(dg_time_var_symbols, [w_pen]),

  mu_hli_all: makelist(concat('mu_li_, i_work), i_work, 1, n_hli),
  dg_time_var_symbols: append(dg_time_var_symbols, mu_hli_all)
) else (
  n_hli: 0,
  mu_hli_all: []
);

load(filename_merge(pathname_directory(load_pathname), "gen_dep_graph.mac"));

if does_depend_on_u('F) then
  error("F may not depend on u");

scalar_list: block([p_work, l_work: makelist (), i_work: 0], for p_work in scalarparams do (l_work:endcons([p_work, 1, 0, i_work], l_work), i_work: i_work+1), l_work);

array_list: block([p_work, idxes, idx_work, maxidx, l_work: makelist(), aps: {}, i_work:length(scalar_list)],
  for p_work in arrayparams do
    aps:adjoin(op(p_work), aps),
  for p_work in aps do (
    idxes: map(args, subset(arrayparams, lambda([x], is(op(x)=p_work)))),
    maxidx: 0,
    for idx_work in idxes do (
      if length(idx_work)>1 then
        error("only one dimensional arrays supported found: ", idx_work)
      else
        if integerp(idx_work[1]) then
          if maxidx=k then
            error("found index k and other integer index mixed in param ", p_work)            
          else
            maxidx: max(maxidx, idx_work[1])
        else
          if idx_work[1]=k then
            if maxidx=0 then
              maxidx: k
            else
                error("found index k and other integer index mixed in param ", p_work)            
          else
            error("only integer indices or ksupported, found: ", idx_work, " in param ", p_work)
     ),
     if maxidx>0 then maxidx: maxidx+1,
     l_work:endcons([p_work, maxidx, 0, i_work], l_work),
     i_work: i_work+1
  ),
  l_work
);

params: append(scalar_list, array_list);
params: sort(params, lambda([a, b], orderlessp(a[1], b[1])));
block([i],
  for i: 1 thru length(params) do
    params[i][4]: i-1
);


matchdeclare(rule_idx, atom);
matchdeclare(any_exp, true);

make_param_rule(p_work):= (if p_work[2]=1 then apply(defrule, [concat('rule, p_work[1]), p_work[1], arraymake('p, [p_work[4], 0])]) else apply(defrule, [concat('rule, p_work[1]), arraymake(p_work[1], [rule_idx]), arraymake('p, [p_work[4], rule_idx])]));
map(make_param_rule, params);

make_x_u_rules(xu, n_work):= block([i_work], for i_work:1 thru length(xu) do apply(defrule, [concat('rule, xu[i_work]), xu[i_work], arraymake(n_work, [i_work-1])]));
make_x_u_rules(x, 'x);
make_x_u_rules(u, 'u);
defrule(rulenegexpo, any_exp^-1.0, any_exp^-1);

dg_rep_rules: delete(dg_diff_if_rule2, delete(dg_diff_if_rule1, rules));
do_replacements(e_work):= block([u, x, p_work],
  /* print("e_work: ", e_work), */
  apply(apply1, cons('e_work, dg_rep_rules))
);

do_assign(n_work, e_work, n_ind, [testdef]):= block([ret, prnts], (
  ?ccurrind\*: n_ind,
  /* print("e_work: ", e_work, "rep: ", do_replacements(e_work)),*/
  gentran(lrsetq(eval(n_work), apply1(scanmap('float, do_replacements(e_work)), rulenegexpo))),
  if length(testdef)>0 and check_nan_inf_mode then (
    ret: testdef[1],
    prnts:map(lambda([v], PRNT(sconcat("\"        ", v,  "= %g\\n\""), v)), do_replacements(listofvars(e_work))),
    prnts: buildq([e: prnts], ","(splice(e))),
    gentran(if 'isNANorINF(eval(n_work)) then ('PRNT(literal("\"    @k %d: ", eval(n_work),  " in line %d is nan or inf: %g\\n\", k, __LINE__-3"), eval(n_work)), eval(prnts), return(eval(ret))))
  )
));

all_zero(v_work):= (apply("and", map(lambda([i_work], i_work=0.0), listarray(v_work))));
print_def(n_work, v_work):= (gentran(literal(eval(if all_zero(v_work) then "#undef" else "#define")), " ", eval(n_work)));

linear_index(i_work, s):= block([dims_: cons(0, copylist(s)),dim,idx_work],
  for dim:1 thru length(dims_) do
    dims_[dim]:dims_[dim]+1,
  for dim:3 thru length(dims_) do
    dims_[dim]:dims_[dim]*dims_[dim-1],
  idx_work:0,
  for dim:1 thru length(i_work) do
    idx_work: idx_work + i_work[dim]*dims_[dim],
  idx_work
);

print_jaco(n_work, v_work, [time_var_test]):= block([c_work,r_work,fx,fu],
  for c_work:0 thru arrayinfo(v_work)[3][2] do (
    gentran(literal("// d", eval(substring(sreverse(string(n_work)), 2, 3)), "[i]/d ", eval(substring(sreverse(string(n_work)), 1, 2)), "[", eval(c_work), "]", cr)),
    for r_work:0 thru arrayinfo(v_work)[3][1] do (
      if length(time_var_test)<1 or time_var_test[1]=is_time_var(v_work[r_work, c_work]) then
        if atom(float(v_work[r_work, c_work])) then
            do_assign(apply("'", [arraymake(n_work, [linear_index([r_work, c_work], arrayinfo(v_work)[3])])]), v_work[r_work, c_work], 4)
        else
            do_assign(apply("'", [arraymake(n_work, [linear_index([r_work, c_work], arrayinfo(v_work)[3])])]), v_work[r_work, c_work], 4, 0)
    )
  )
      /*gentran(literal("    ", eval(n_work), "["), eval(linear_index([r_work, c_work], arrayinfo(v_work)[3])), literal("]= "), eval(v_work[r_work, c_work]), literal("\;", cr))*/
);
      
print_jaco2(n_work, v_work, [time_var_test]):= block([d3,c_work,r_work, fxx, fuu, fxu, lin_index:0, max_row_index],
  for r_work:0 thru arrayinfo(v_work)[3][1] do (
    gentran(literal("// d^2", eval(substring(sreverse(string(n_work)), 3, 4)), "[", eval(r_work), "]/d", eval(substring(sreverse(string(n_work)), 2, 3)), "[i] d", eval(substring(sreverse(string(n_work)), 1, 2)), "[j]", cr)),    
  
    for d3:0 thru arrayinfo(v_work)[3][3] do (
      if arrayinfo(v_work)[3][2]=arrayinfo(v_work)[3][3] and tri_matrix_mode then
        max_row_index: d3
      else
        max_row_index: arrayinfo(v_work)[3][2],
      gentran(literal("// j= ", eval(d3), cr)),    
      for c_work:0 thru max_row_index do (
        if length(time_var_test)<1 or time_var_test[1]=is_time_var(v_work[r_work, c_work, d3]) then (
          if atom(float(v_work[r_work, c_work, d3])) then
            do_assign(apply("'", [arraymake(n_work, [lin_index])]), v_work[r_work, c_work, d3], 4)
          else
            do_assign(apply("'", [arraymake(n_work, [lin_index])]), v_work[r_work, c_work, d3], 4, 0)
        ),
        lin_index: lin_index+1
        /*gentran(literal("    ", eval(n_work), "["), eval(linear_index([r_work, c_work, d3], arrayinfo(v_work)[3])), literal("]= "), eval(v_work[r_work, c_work, d3]), literal("\;", cr))*/
      )
    )
  )  
);

print_grad(n_work, v_work, [time_var_test]):= block([r_work, Vx, Qx, Qu, Lx, Lu, Fx],
  for r_work:0 thru arrayinfo(v_work)[3][1] do
      if length(time_var_test)<1 or time_var_test[1]=is_time_var(v_work[r_work]) then (
        if atom(float(v_work[r_work])) then
            do_assign(apply("'", [arraymake(n_work, [r_work])]), v_work[r_work], 4)
        else
            do_assign(apply("'", [arraymake(n_work, [r_work])]), v_work[r_work], 4, 0)
      )
    /*gentran(literal("    ", eval(n_work), "["), eval(r_work), literal("]= "), eval(v_work[r_work]), literal("\;", cr))*/
);

print_hess(n_work, v_work, [time_var_test]):= block([c_work,r_work, Lxx, Luu, Lxu, Qxx, Quu, Qxu, Fxx, Vxx, lin_index:0, max_row_index],
  for c_work:0 thru arrayinfo(v_work)[3][2] do (
    if arrayinfo(v_work)[3][1]=arrayinfo(v_work)[3][2] and tri_matrix_mode then
      max_row_index: c_work
    else
      max_row_index: arrayinfo(v_work)[3][1],
    for r_work:0 thru  max_row_index do (
      if length(time_var_test)<1 or time_var_test[1]=is_time_var(v_work[r_work, c_work]) then (
        if atom(float(v_work[r_work, c_work])) then
          do_assign(apply("'", [arraymake(n_work, [lin_index])]), v_work[r_work, c_work], 4)
        else
          do_assign(apply("'", [arraymake(n_work, [lin_index])]), v_work[r_work, c_work], 4, 0)
      ),
      /*gentran(literal("    ", eval(n_work), "["), eval(linear_index([r_work, c_work], arrayinfo(v_work)[3])), literal("]= "), eval(v_work[r_work, c_work]), literal("\;", cr))*/
      lin_index: lin_index+1
    )
  )
);

print_aux([time_var_test]):= block([a_work, i_work:1, skip_gen], /* TODO: change time_var_test to array of flags */
  for a_work in aux_def do (
    skip_gen: false,
    if length(time_var_test)>=1 then (
      if time_var_test[1]=0 and is_time_var(a_work[1]) then
        skip_gen: true,
      if time_var_test[1]=1 and (not(is_time_var(a_work[1])) or does_depend_on_u(a_work[1])) then
        skip_gen: true,
      if time_var_test[1]=2 and (not(is_time_var(a_work[1])) or not(does_depend_on_u(a_work[1]))) then
        skip_gen: true
    ),
    if length(time_var_test)>=2 then (
      if not(get(a_work[1], time_var_test[2])) then skip_gen: true
    ),
    if not(skip_gen) then (
      gentran(literal("// aux_def[", eval(i_work), "]", cr)),
      if atom(float(a_work[2])) then
        do_assign(concat(aux_prefix, a_work[1]), a_work[2], 4)
      else
        do_assign(concat(aux_prefix, a_work[1]), a_work[2], 4, 0)
    ),
    i_work: i_work+1
  )
)$
      
print_deriv([time_var_test]):= block([a_work, i_work:1, skip_gen],
  for a_work in aux_deriv do (
    skip_gen: false,
    if length(time_var_test)>=1 then (
      if time_var_test[1]=0 and is_time_var(a_work[1]) then
        skip_gen: true,    
      if time_var_test[1]=1 and not(is_time_var(a_work[1])) then
        skip_gen: true
    ),
    if length(time_var_test)>=2 then (
      if not(get(a_work[1], time_var_test[2])) then skip_gen: true
    ),
    if not(skip_gen) then (
      gentran(literal("// aux_deriv[", eval(i_work), "]", cr)),
      if atom(float(a_work[2])) then
        do_assign(concat(daux_prefix, a_work[1]), a_work[2], 4)
      else
        do_assign(concat(daux_prefix, a_work[1]), a_work[2], 4, 0)
    ),
    i_work: i_work+1
  )
)$
      


f_: map(lambda([i_work], arrayapply(f, [i_work])), x);

fx:make_array(flonum, nx, nx);
fx_: flatten(args(jacobian(f_, x)));
fillarray(fx, fx_);

fu:make_array(flonum, nx, nu);
fu_: flatten(args(jacobian(f_, u)));
fillarray(fu, fu_);

fxx:make_array(flonum, nx, nx, nx);
fillarray(fxx, flatten(args(jacobian(fx_, x))));

fuu:make_array(flonum, nx, nu, nu);
fillarray(fuu, flatten(args(jacobian(fu_, u))));

fxu:make_array(flonum, nx, nx, nu);
fillarray(fxu, flatten(args(jacobian(fx_, u))));

Fx:make_array(flonum, nx);
fillarray(Fx, args(jacobian([F], x))[1]);

Fxx:make_array(flonum, nx, nx);
fillarray(Fxx, flatten(args(hessian(F, x))));

Lx:make_array(flonum, nx);
fillarray(Lx, args(jacobian([L], x))[1]);

Lxx:make_array(flonum, nx, nx);
fillarray(Lxx, flatten(args(hessian(L, x))));

Lu:make_array(flonum, nu);
fillarray(Lu, args(jacobian([L], u))[1]);

Luu:make_array(flonum, nu, nu);
fillarray(Luu, flatten(args(hessian(L, u))));

Lxu:make_array(flonum, nx, nu);
fillarray(Lxu, flatten(args(jacobian(args(jacobian([L], x))[1], u))));

if member(h, arrays) then
block([i_work],
  h_: map(lambda([i_work], arrayapply(h, [i_work])), flatten(rest(arrayinfo(h), 2))),
  nh: length(h_),
  hu: make_array(flonum, nh, nu),
  hu_: flatten(args(jacobian(h_, u))),
  fillarray(hu, hu_),

  hx: make_array(flonum, nh, nx),
  hx_: flatten(args(jacobian(h_, x))),
  fillarray(hx, hx_),

  for i_work: 1 thru nh do (
    hu_: makelist(hu[i_work-1, i_], i_, 0, nu-1),
    if depends_on_u(h_[i_work]) then
      error("constaint (", h_[i_work], ") may only depend directly on one input"),
      
    if apply("+", map(lambda([x], if equal(x, 0) then 0 else 1), hu_))#1 then
      error("constaint (", h_[i_work], ") may depend on only one input. hu: ", hu_),
     
    if not(equal(abs(apply("+", hu_)), 1)) then
      error("coefficient of input in constaint (", h_[i_work], ") must be 1 or -1")
  )
)
else nh: 0$

do_clamp(i_work):= block([hu_, idx_work, sign_, lim],
  hu_: makelist(hu[i_work-1, i_], i_, 0, nu-1),
    
  idx_work: first(sublist_indices(hu_, lambda([x], not(equal(x, 0))))),
  sign_: apply("+", hu_),
  lim: h_[i_work] - sign_*u[idx_work],
  if sign_>0 then
    lim: -lim,

  gentran(literal("// constraint h[", eval(flatten(rest(arrayinfo(h), 2))[i_work]), "]= ", eval(h_[i_work]), cr)),
  do_assign('limit, lim, 4),
  
  if sign_>0 then
    gentran(eval(if 'u[idx_work-1]>'limit then lrsetq(u[idx_work-1], limit)))
  else
    gentran(eval(if 'u[idx_work-1]<'limit then lrsetq(u[idx_work-1], limit))),
    
 gentran(literal(cr))
);

do_limits(vn, i_work):= block([hu_, idx_work, sign_, lim],
  hu_: makelist(hu[i_work-1, i_], i_, 0, nu-1),
  idx_work: first(sublist_indices(hu_, lambda([x], not(equal(x, 0))))),
  sign_: apply("+", hu_),
  lim: h_[i_work] - sign_*u[idx_work],
  if sign_>0 then
    lim: -lim,

  gentran(literal("// constraint h[", eval(flatten(rest(arrayinfo(h), 2))[i_work]), "]= ", eval(h_[i_work]), cr)),
  do_assign('limit, lim, 4),
  
  if sign_>0 then (
    gentran(eval(if concat(vn, upper)[idx_work-1]>'limit then (eval(concat(vn, upper)[idx_work-1]): limit, lrsetq('upper_idx[idx_work-1], i_work-1))))
  ) else (
    gentran(eval(if concat(vn, lower)[idx_work-1]<'limit then (eval(concat(vn, lower)[idx_work-1]): limit, lrsetq('lower_idx[idx_work-1], i_work-1))))
  ),  
  
  gentran(literal(cr))
);

do_hx(hx_name, h_sign_name, i_work, n_ind):= block([j_work, hx_],
  gentran(literal("// constraint h[", eval(flatten(rest(arrayinfo(h), 2))[i_work]), "]= ", eval(h_[i_work]), cr)),
  for j_work: 0 thru nx-1 do
    do_assign(apply("'", [arraymake(hx_name, [j_work])]), hx[i_work-1, j_work], n_ind),
    
  hu_: makelist(hu[i_work-1, i_], i_, 0, nu-1),  
  do_assign(apply("'", [arraymake(h_sign_name, [0])]), apply("+", hu_), n_ind)
 
);
